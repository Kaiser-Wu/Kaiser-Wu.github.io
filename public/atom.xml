<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kaiser.Wu</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kaiser-wu.github.io/"/>
  <updated>2019-03-05T08:21:53.350Z</updated>
  <id>https://kaiser-wu.github.io/</id>
  
  <author>
    <name>Kaiser.Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java 常用数据结构</title>
    <link href="https://kaiser-wu.github.io/2019/02/28/Java%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://kaiser-wu.github.io/2019/02/28/Java 数据结构/</id>
    <published>2019-02-28T04:03:49.591Z</published>
    <updated>2019-03-05T08:21:53.350Z</updated>
    
    <content type="html"><![CDATA[<p>关于 Java 常用数据结构知识点分析和总结！</p><h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><h2 id="UML-类图"><a href="#UML-类图" class="headerlink" title="UML 类图"></a>UML 类图</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于 Java 常用数据结构知识点分析和总结！&lt;/p&gt;
&lt;h1 id=&quot;总览&quot;&gt;&lt;a href=&quot;#总览&quot; class=&quot;headerlink&quot; title=&quot;总览&quot;&gt;&lt;/a&gt;总览&lt;/h1&gt;&lt;h2 id=&quot;UML-类图&quot;&gt;&lt;a href=&quot;#UML-类图&quot; class=&quot;h
      
    
    </summary>
    
      <category term="Java基础" scheme="https://kaiser-wu.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="数据结构" scheme="https://kaiser-wu.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>备忘录</title>
    <link href="https://kaiser-wu.github.io/2019/02/27/%E5%A4%87%E5%BF%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://kaiser-wu.github.io/2019/02/27/备忘记录/</id>
    <published>2019-02-27T01:33:03.807Z</published>
    <updated>2019-03-05T08:25:58.051Z</updated>
    
    <content type="html"><![CDATA[<p>代办事项</p><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><ul><li style="list-style: none"><input type="checkbox"> MySQL 基本数据类型</li><li style="list-style: none"><input type="checkbox"> 建表数据类型的选取</li><li style="list-style: none"><input type="checkbox"> 索引的创建</li></ul><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><ul><li style="list-style: none"><input type="checkbox"> XX</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;代办事项&lt;/p&gt;
&lt;h2 id=&quot;MySQL&quot;&gt;&lt;a href=&quot;#MySQL&quot; class=&quot;headerlink&quot; title=&quot;MySQL&quot;&gt;&lt;/a&gt;MySQL&lt;/h2&gt;&lt;ul&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input type=&quot;ch
      
    
    </summary>
    
      <category term="备忘录" scheme="https://kaiser-wu.github.io/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
    
      <category term="备忘录" scheme="https://kaiser-wu.github.io/tags/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 知识点总结</title>
    <link href="https://kaiser-wu.github.io/2019/02/26/MySQL%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>https://kaiser-wu.github.io/2019/02/26/MySQL 知识点总结/</id>
    <published>2019-02-26T12:15:35.279Z</published>
    <updated>2019-03-05T08:20:26.609Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="数据库" scheme="https://kaiser-wu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="https://kaiser-wu.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>LombokProject</title>
    <link href="https://kaiser-wu.github.io/2018/10/23/LombokProject/"/>
    <id>https://kaiser-wu.github.io/2018/10/23/LombokProject/</id>
    <published>2018-10-22T16:11:18.000Z</published>
    <updated>2019-03-05T09:09:19.336Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>Project Lombok是一个java库，它可以自动插入你的编辑器并构建工具，为你的java加油。<br>永远不要再写另一个getter或equals方法。尽早访问未来的Java功能val，等等。</p><p><strong>使用Project Lombok减少Boilerplate代码</strong></p><p>“Boilerplate”是一个术语，用于描述在应用程序的许多部分中重复的代码，几乎没有任何改动。对Java语言最常提出批评的批评之一是大多数项目中都存在此类代码的数量。这个问题经常是各种库中设计决策的结果，但是由于语言本身的限制而加剧。龙目岛计划旨在通过一组简单的注释取代一些最严重的罪犯，以减少他们的流行程度。</p><p>虽然注释用于指示用法，实现绑定甚至生成框架使用的代码并不罕见，但它们通常不用于生成应用程序直接使用的代码。部分原因是这样做需要在开发时急切地处理注释。龙目岛计划正是这样做的。通过集成到IDE中，Project Lombok能够注入开发人员可立即使用的代码。例如，只需将@Data注释添加到数据类（如下所示），就会在IDE中生成许多新方法：<br><img src="/images/media/lombok/@Data.png" alt="@Data"></p><hr><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><p>Project Lombok 项目在项目站点上作为单个jar文件提供 。它包括用于IDE开发的API作为IDE集成的安装程序。在大多数系统上，只需双击jar文件即可启动安装程序。如果系统未配置为正确启动jar文件，则还可以从命令行运行，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar lombok.jar</span><br></pre></td></tr></table></figure><p>安装程序将尝试检测支持的IDE的位置。如果无法正确确定IDE的安装位置，则可以手动指定位置。只需单击“安装/更新”，IDE集成即可完成。在撰写本文时，仅支持Eclipse和NetBeans。但是，IntelliJ IDEA源代码的发布使得IDEA支持成为未来版本的可能性，JDeveloper已经报告了有限的成功。<br><img src="/images/media/lombok/install.png" alt="instal"></p><p>jar文件仍然需要包含在将使用Project Lombok注释的任何项目的类路径中。通过将此项目添加到项目pom.xml文件中，Maven用户可以将Lombok作为依赖项包括在内：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt; </span><br><span class="line">    &lt;dependency&gt; </span><br><span class="line">        &lt;groupId&gt; org.projectlombok &lt;/ groupId&gt; </span><br><span class="line">        &lt;artifactId&gt; lombok &lt;/ artifactId&gt; </span><br><span class="line">        &lt;version&gt; 0.9.2 &lt;/ version&gt; </span><br><span class="line">    &lt;/ dependency&gt; </span><br><span class="line">&lt;/ dependencies&gt; </span><br><span class="line">&lt;repositories&gt; </span><br><span class="line">    &lt;repository&gt; </span><br><span class="line">        &lt;id &gt; projectlombok.org &lt;/ id&gt; </span><br><span class="line">        &lt;url&gt; http://projectlombok.org/mavenrepo &lt;/ url&gt; </span><br><span class="line">    &lt;/ repository&gt; </span><br><span class="line">&lt;/ repositories&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="三、Lombok-注释"><a href="#三、Lombok-注释" class="headerlink" title="三、Lombok 注释"></a>三、Lombok 注释</h2><p>典型的Java项目将数百行代码用于定义简单数据类所需的样板文件并不罕见。这些类通常包含这些字段的若干字段，getter和setter，以及equals和 hashCode实施方式。在最简单的场景中，Project Lombok可以将这些类减少到必需的字段和单个<code>@Data</code>注释。</p><p>当然，最简单的场景不一定是开发人员日常所面临的场景。出于这个原因，Project Lombok中有许多注释允许对类的结构和行为进行更细粒度的控制。</p><hr><h3 id="3-1-Getter和-Setter"><a href="#3-1-Getter和-Setter" class="headerlink" title="3.1 @Getter和@Setter"></a>3.1 <code>@Getter</code>和<code>@Setter</code></h3><p><code>@Getter</code>和<code>@Setter</code>注解分别产生一个字段的获取和设置。生成的getter正确遵循boolean属性的约定，从而产生 isFoogetter方法名称而不是getFoo 任何boolean字段foo。应当注意，如果注释字段所属的类包含与要生成的getter或setter同名的方法，则无论参数或返回类型如何，都不会生成相应的方法。</p><p>两个<code>@Getter</code>和<code>@Setter</code>注释一个可选参数，来指定所生成的方法的访问级别。</p><p><strong>Lombok注释代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span> <span class="meta">@Setter</span> <span class="keyword">private</span> <span class="keyword">boolean</span> employ = <span class="keyword">true</span>; </span><br><span class="line"><span class="meta">@Setter</span>（AccessLevel.PROTECTED）<span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure><p><strong>等效的Java源代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> employed = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmployed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> employed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmployed</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> employed)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.employed = employed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">final</span> String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-2-NonNull"><a href="#3-2-NonNull" class="headerlink" title="3.2 @NonNull"></a>3.2 <code>@NonNull</code></h3><p><code>@NonNull</code>注释用于指示快速失败的相应部件空检查的需要。当放置在Lombok生成setter方法的字段上时，将生成空检查，这将导致NullPointerException 应该提供null值。此外，如果Lombok为拥有类生成构造函数，则该字段将添加到构造函数签名中，并且null检查将包含在生成的构造函数代码中。</p><p>此注释反映了在IntelliJ IDEA和FindBugs等中找到的@NotNull和<code>@NonNull</code>注释。 对于主题的这些变化，Lombok是注释不可知的。 如果Lombok遇到任何使用<code>@NotNull</code>或<code>@NonNull</code>名称注释注释的成员，它将通过生成适当的相应代码来表示它。 Project Lombok的作者进一步评论说，如果将此类型的注释添加到Java，则Lombok版本将被删除。</p><p><strong>Lombok 注释的类 Family:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span> <span class="meta">@Setter</span> <span class="meta">@NonNull</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Person&gt; members;</span><br></pre></td></tr></table></figure><p><strong>等效的 Java 源码:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Person&gt; members;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Family</span><span class="params">(@NonNull <span class="keyword">final</span> List&lt;Person&gt; members)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (members == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> java.lang.NullPointerException(<span class="string">"members"</span>);</span><br><span class="line">    <span class="keyword">this</span>.members = members;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">getMembers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> members;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMembers</span><span class="params">(@NonNull <span class="keyword">final</span> List&lt;Person&gt; members)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (members == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> java.lang.NullPointerException(<span class="string">"members"</span>);</span><br><span class="line">    <span class="keyword">this</span>.members = members;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-3-ToString"><a href="#3-3-ToString" class="headerlink" title="3.3 @ToString"></a>3.3 <code>@ToString</code></h3><p>此批注生成toString方法的实现。 默认情况下，任何非静态字段都将以名称 - 值对的形式包含在方法的输出中。 如果需要，可以通过将注释参数<code>includeFieldNames</code>设置为<code>false</code>来抑制输出中包含属性名称。</p><p>通过在<code>exclude</code>参数中包含其字段名称，可以从生成的方法的输出中排除特定字段。 或者，of参数可用于仅列出输出中所需的那些字段。 通过将<code>callSuper</code>参数设置为true，还可以包含超类的toString方法的输出。</p><p><strong>Lombok 注释的代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ToString</span>(callSuper=<span class="keyword">true</span>,exclude=<span class="string">"someExcludedField"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">extends</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> someBoolean = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> String someStringField;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> someExcludedField;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>等效的 Java 源码</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">extends</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> someBoolean = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> String someStringField;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> someExcludedField;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@java</span>.lang.Override</span><br><span class="line">    <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Foo(super="</span> + <span class="keyword">super</span>.toString() +</span><br><span class="line">            <span class="string">", someBoolean="</span> + someBoolean +</span><br><span class="line">            <span class="string">", someStringField="</span> + someStringField + <span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="3-4-EqualsAndHashCode"><a href="#3-4-EqualsAndHashCode" class="headerlink" title="3.4 @EqualsAndHashCode"></a>3.4 <code>@EqualsAndHashCode</code></h3><p>此类级别注释将导致Lombok生成equals和hashCode方法，因为这两者通过hashCode契约本质地绑定在一起。 默认情况下，两个方法都将考虑类中非静态或瞬态的任何字段。 与<code>@ToString</code>非常相似，提供了<code>exclude</code>参数以防止字段包含在生成的逻辑中。 也可以使用of参数列出应该考虑的那些字段。</p><p>也像<code>@ToString</code>一样，这个注释有一个<code>callSuper</code>参数。将其设置为true将导致equals通过在考虑当前类中的字段之前调用来自超类的equals来验证相等性。对于hashCode方法，它导致在计算哈希时结合超类的hashCode的结果。将callSuper设置为true时，请注意确保父类中的equals方法正确处理实例类型检查。如果父类检查该类是否属于特定类型而不仅仅是两个对象的类相同，则可能导致不希望的结果。如果超类使用Lombok生成的equals方法，则这不是问题。但是，其他实现可能无法正确处理此情况。另请注意，当类仅扩展Object时，无法将callSuper设置为true，因为这会导致实例等式检查使字段比较短路。这是由于生成的方法调用Object上的equals实现，如果被比较的两个实例不是同一个实例，则返回false。因此，在这种情况下，Lombok将生成编译时错误。</p><p><strong>Lombok 注释的代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EqualsAndHashCode</span>(callSuper=<span class="keyword">true</span>,exclude=&#123;<span class="string">"address"</span>,<span class="string">"city"</span>,<span class="string">"state"</span>,<span class="string">"zip"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">SentientBeing</span> </span>&#123;</span><br><span class="line">    <span class="keyword">enum</span> Gender &#123; Male, Female &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span> <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@NonNull</span> <span class="keyword">private</span> Gender gender;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String ssn;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line">    <span class="keyword">private</span> String zip;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>等效的 Java 源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">SentientBeing</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">enum</span> Gender &#123;</span><br><span class="line">        <span class="comment">/*public static final*/</span> Male <span class="comment">/* = new Gender() */</span>,</span><br><span class="line">        <span class="comment">/*public static final*/</span> Female <span class="comment">/* = new Gender() */</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> Gender gender;</span><br><span class="line">    <span class="keyword">private</span> String ssn;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line">    <span class="keyword">private</span> String zip;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@java</span>.lang.Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(<span class="keyword">final</span> java.lang.Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (o.getClass() != <span class="keyword">this</span>.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">super</span>.equals(o)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">final</span> Person other = (Person)o;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.name == <span class="keyword">null</span> ? other.name != <span class="keyword">null</span> : !<span class="keyword">this</span>.name.equals(other.name)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.gender == <span class="keyword">null</span> ? other.gender != <span class="keyword">null</span> : !<span class="keyword">this</span>.gender.equals(other.gender)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.ssn == <span class="keyword">null</span> ? other.ssn != <span class="keyword">null</span> : !<span class="keyword">this</span>.ssn.equals(other.ssn)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@java</span>.lang.Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> PRIME = <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">        result = result * PRIME + <span class="keyword">super</span>.hashCode();</span><br><span class="line">        result = result * PRIME + (<span class="keyword">this</span>.name == <span class="keyword">null</span> ? <span class="number">0</span> : <span class="keyword">this</span>.name.hashCode());</span><br><span class="line">        result = result * PRIME + (<span class="keyword">this</span>.gender == <span class="keyword">null</span> ? <span class="number">0</span> : <span class="keyword">this</span>.gender.hashCode());</span><br><span class="line">        result = result * PRIME + (<span class="keyword">this</span>.ssn == <span class="keyword">null</span> ? <span class="number">0</span> : <span class="keyword">this</span>.ssn.hashCode());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-5-Data"><a href="#3-5-Data" class="headerlink" title="3.5 @Data"></a>3.5 <code>@Data</code></h3><p><code>@Data</code>注释可能是Project Lombok工具集中最常用的注释。 它结合了<code>@ToString</code>，<code>@ EqualsAndHashCode</code>，<code>@ Getter</code>和<code>@Setter</code>的功能。 本质上，在类上使用<code>@Data</code>与使用默认的<code>@ToString</code>和<code>@EqualsAndHashCode</code>注释类以及使用<code>@Getter</code>和<code>@Setter</code>注释每个字段相同。 使用<code>@Data</code>注释类也会触发Lombok的构造函数生成。 这会添加一个公共构造函数，它将任何<code>@NonNull</code>或<code>final</code>字段作为参数。 这提供了普通旧Java对象（POJO）所需的一切。</p><p>虽然@Data非常有用，但它不提供与其他Lombok注释相同的控制粒度。 要覆盖默认方法生成行为，请使用其他Lombok注释之一注释类，字段或方法，并指定必要的参数值以实现所需的效果。</p><p><code>@Data</code>确实提供了一个可用于生成静态工厂方法的参数选项。 将<code>staticConstructor</code>参数的值设置为所需的方法名称将导致Lombok将生成的构造函数设置为<code>private</code>，并公开给定名称的静态工厂方法。</p><p><strong>Lombok 注释的代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span>(staticConstructor=<span class="string">"of"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Person founder;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Person&gt; employees;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>等效的 Java 源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Person founder;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Person&gt; employees;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Company</span><span class="params">(<span class="keyword">final</span> Person founder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.founder = founder;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Company <span class="title">of</span><span class="params">(<span class="keyword">final</span> Person founder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Company(founder);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getFounder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> founder;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">final</span> String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">getEmployees</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employees;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmployees</span><span class="params">(<span class="keyword">final</span> List&lt;Person&gt; employees)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.employees = employees;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@java</span>.lang.Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(<span class="keyword">final</span> java.lang.Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (o.getClass() != <span class="keyword">this</span>.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">final</span> Company other = (Company)o;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.founder == <span class="keyword">null</span> ? other.founder != <span class="keyword">null</span> : !<span class="keyword">this</span>.founder.equals(other.founder)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.name == <span class="keyword">null</span> ? other.name != <span class="keyword">null</span> : !<span class="keyword">this</span>.name.equals(other.name)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.employees == <span class="keyword">null</span> ? other.employees != <span class="keyword">null</span> : !<span class="keyword">this</span>.employees.equals(other.employees)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@java</span>.lang.Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> PRIME = <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">        result = result * PRIME + (<span class="keyword">this</span>.founder == <span class="keyword">null</span> ? <span class="number">0</span> : <span class="keyword">this</span>.founder.hashCode());</span><br><span class="line">        result = result * PRIME + (<span class="keyword">this</span>.name == <span class="keyword">null</span> ? <span class="number">0</span> : <span class="keyword">this</span>.name.hashCode());</span><br><span class="line">        result = result * PRIME + (<span class="keyword">this</span>.employees == <span class="keyword">null</span> ? <span class="number">0</span> : <span class="keyword">this</span>.employees.hashCode());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@java</span>.lang.Override</span><br><span class="line">    <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Company(founder="</span> + founder + <span class="string">", name="</span> + name + <span class="string">", employees="</span> + employees + <span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-6-Cleanup"><a href="#3-6-Cleanup" class="headerlink" title="3.6 @Cleanup"></a>3.6 <code>@Cleanup</code></h3><p><code>@Cleanup</code>注释可用于确保释放已分配的资源。 当使用@Cleanup注释局部变量时，任何后续代码都包装在try / finally块中，该块保证在当前作用域的末尾调用cleanup方法。 默认情况下，<code>@ Cleanan</code>假定清理方法命名为“close”，与输入和输出流一样。 但是，可以为注释的value参数提供不同的方法名称。 只有不带参数的清理方法才能与此注释一起使用。</p><p>使用<code>@Cleanup</code>注释时还需要注意一点。 如果清理方法抛出异常，它将抢占方法体中引发的任何异常。 这可能导致问题的实际原因被掩盖，并且在选择使用Project Lombok的资源管理时应该考虑到这一点。 此外，随着Java 7中的自动资源管理，这个特定的注释可能相对短暂。</p><p><strong>Lombok 注释的代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCleanUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="meta">@Cleanup</span> ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        baos.write(<span class="keyword">new</span> <span class="keyword">byte</span>[] &#123;<span class="string">'Y'</span>,<span class="string">'e'</span>,<span class="string">'s'</span>&#125;);</span><br><span class="line">        System.out.println(baos.toString());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>等效的 Java 源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCleanUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            baos.write(<span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="string">'Y'</span>, <span class="string">'e'</span>, <span class="string">'s'</span>&#125;);</span><br><span class="line">            System.out.println(baos.toString());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            baos.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7-Synchronized"><a href="#3-7-Synchronized" class="headerlink" title="3.7 @Synchronized"></a>3.7 <code>@Synchronized</code></h3><p>在方法上使用<code>synchronized</code>关键字会导致不幸的影响，因为任何从事过多线程软件工作的开发人员都可以证明这一点。 对于静态方法，synchronized关键字将在实例方法的情况下锁定当前对象（this）或在类对象上锁定。 这意味着开发人员控制之外的代码可能会锁定同一个对象，从而导致死锁。 通常建议明确地锁定一个单独的对象，该对象仅专用于该目的，而不是以允许未经请求的锁定的方式公开。 Project Lombok为此目的提供了<code>@Synchronized</code>注释。</p><p>使用<code>@Synchronized</code>注释实例方法将提示Lombok生成一个名为<code>$ lock</code>的私有锁定字段，该方法将在执行之前锁定该字段。 类似地，以相同方式注释静态方法将生成名为<code>$ LOCK</code>的私有静态对象，以便以相同的方式使用静态方法。 可以通过为注释的value参数提供字段名称来指定不同的锁定对象。 提供字段名称时，开发人员必须定义属性，因为Lombok不会生成它。</p><p><strong>Lombok 注释的代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> DateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"MM-dd-YYYY"</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Synchronized</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">synchronizedFormat</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> format.format(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>等效的 Java 源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> java.lang.Object $lock = <span class="keyword">new</span> java.lang.Object[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">private</span> DateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"MM-dd-YYYY"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">synchronizedFormat</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> ($lock) &#123;</span><br><span class="line">        <span class="keyword">return</span> format.format(date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-8-SneakyThrows"><a href="#3-8-SneakyThrows" class="headerlink" title="3.8 @SneakyThrows"></a>3.8 <code>@SneakyThrows</code></h3><p><code>@SneakyThrows</code>可能是具有最多批评者的Project Lombok注释，因为它是对已检查异常的直接攻击。 关于使用已检查异常的问题存在很多分歧，大量开发人员认为这是一个失败的实验。 这些开发人员会喜欢<code>@SneakyThrows</code>。 在已检查/未检查的异常栏的另一侧的那些开发人员很可能将此视为隐藏潜在问题。</p><p>如果IllegalAccessException或某些父类未在throws子句中列出，则抛出IllegalAccessException通常会生成“未处理的异常”错误：<br><img src="/images/media/lombok/SneakThrows.png" alt="SneakThrows"></p><p>使用@SneakyThrows注释时，错误消失了。</p><p><img src="/images/media/lombok/SneakyThrows2.png" alt="SneakThrows2"></p><p>默认情况下，@ SneakyThrows将允许抛出任何已检查的异常而不在throws子句中声明。 通过向注释的value参数提供可抛出类（Class &lt;？extends Throwable&gt;）的数组，可以将此限制为特定的异常集。</p><p><strong>Lombok 注释的代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSneakyThrows</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalAccessException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>等效的 Java 源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSneakyThrows</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalAccessException();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (java.lang.Throwable $ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> lombok.Lombok.sneakyThrow($ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看上面的代码和Lombok.sneakyThrow（Throwable）的签名将导致大多数人认为异常被包装在RuntimeException中并重新抛出，但事实并非如此。 sneakyThrow方法永远不会正常返回，而是将提供的throwable完全保持不变。</p><hr><h2 id="四、成本和收益"><a href="#四、成本和收益" class="headerlink" title="四、成本和收益"></a>四、成本和收益</h2><p>与任何技术选择一样，使用Project Lombok也会产生正面和负面影响。 将Lombok的注释合并到项目中可以大大减少在IDE中生成或手工编写的样板代码行数。 这样可以减少维护开销，减少错误并提高可读性。</p><p>这并不是说在项目中使用Project Lombok注释没有缺点。 Lombok项目主要旨在填补Java语言的空白。 因此，可能会发生对语言的更改，从而妨碍使用Lombok的注释，例如添加第一类属性支持。 此外，当与基于注释的对象关系映射（ORM）框架结合使用时，数据类上的注释数量可能开始变得难以处理。 这在很大程度上被Lombok注释取代的代码量所抵消。 但是，那些避免经常使用注释的人可能会选择另一种方式。</p><h3 id="4-1-什么消失了"><a href="#4-1-什么消失了" class="headerlink" title="4.1 什么消失了"></a>4.1 什么消失了</h3><p><strong>Lombok 注释的代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ociweb.jnb.lombok;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"><span class="keyword">import</span> lombok.NonNull;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span>(exclude=&#123;<span class="string">"address"</span>,<span class="string">"city"</span>,<span class="string">"state"</span>,<span class="string">"zip"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">enum</span> Gender &#123; Male, Female &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span> <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="meta">@NonNull</span> <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="meta">@NonNull</span> <span class="keyword">private</span> <span class="keyword">final</span> Gender gender;</span><br><span class="line">    <span class="meta">@NonNull</span> <span class="keyword">private</span> <span class="keyword">final</span> Date dateOfBirth;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String ssn;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line">    <span class="keyword">private</span> String zip;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>等效的 Java 源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ociweb.jnb.lombok;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> lombok.NonNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">enum</span> Gender &#123;</span><br><span class="line">        <span class="comment">/*public static final*/</span> Male <span class="comment">/* = new Gender() */</span>,</span><br><span class="line">        <span class="comment">/*public static final*/</span> Female <span class="comment">/* = new Gender() */</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Gender gender;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Date dateOfBirth;</span><br><span class="line">    <span class="keyword">private</span> String ssn;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line">    <span class="keyword">private</span> String zip;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(@NonNull <span class="keyword">final</span> String firstName, @NonNull <span class="keyword">final</span> String lastName,</span></span></span><br><span class="line"><span class="function"><span class="params">            @NonNull <span class="keyword">final</span> Gender gender, @NonNull <span class="keyword">final</span> Date dateOfBirth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (firstName == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> java.lang.NullPointerException(<span class="string">"firstName"</span>);</span><br><span class="line">        <span class="keyword">if</span> (lastName == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> java.lang.NullPointerException(<span class="string">"lastName"</span>);</span><br><span class="line">        <span class="keyword">if</span> (gender == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> java.lang.NullPointerException(<span class="string">"gender"</span>);</span><br><span class="line">        <span class="keyword">if</span> (dateOfBirth == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> java.lang.NullPointerException(<span class="string">"dateOfBirth"</span>);</span><br><span class="line">        <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">        <span class="keyword">this</span>.dateOfBirth = dateOfBirth;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstName</span><span class="params">(@NonNull <span class="keyword">final</span> String firstName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (firstName == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> java.lang.NullPointerException(<span class="string">"firstName"</span>);</span><br><span class="line">        <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(@NonNull <span class="keyword">final</span> String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lastName == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> java.lang.NullPointerException(<span class="string">"lastName"</span>);</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Gender <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getDateOfBirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dateOfBirth;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSsn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ssn;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSsn</span><span class="params">(<span class="keyword">final</span> String ssn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ssn = ssn;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(<span class="keyword">final</span> String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCity</span><span class="params">(<span class="keyword">final</span> String city)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">final</span> String state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getZip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> zip;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setZip</span><span class="params">(<span class="keyword">final</span> String zip)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.zip = zip;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@java</span>.lang.Override</span><br><span class="line">    <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person(firstName="</span> + firstName + <span class="string">", lastName="</span> + lastName + </span><br><span class="line">            <span class="string">", gender="</span> + gender + <span class="string">", dateOfBirth="</span> + dateOfBirth +</span><br><span class="line">            <span class="string">", ssn="</span> + ssn + <span class="string">", address="</span> + address + <span class="string">", city="</span> + city +</span><br><span class="line">            <span class="string">", state="</span> + state + <span class="string">", zip="</span> + zip + <span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@java</span>.lang.Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(<span class="keyword">final</span> java.lang.Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (o.getClass() != <span class="keyword">this</span>.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">final</span> Person other = (Person)o;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.firstName == <span class="keyword">null</span></span><br><span class="line">                ? other.firstName != <span class="keyword">null</span></span><br><span class="line">                : !<span class="keyword">this</span>.firstName.equals(other.firstName))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.lastName == <span class="keyword">null</span></span><br><span class="line">                ? other.lastName != <span class="keyword">null</span></span><br><span class="line">                : !<span class="keyword">this</span>.lastName.equals(other.lastName))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.gender == <span class="keyword">null</span></span><br><span class="line">                ? other.gender != <span class="keyword">null</span></span><br><span class="line">                : !<span class="keyword">this</span>.gender.equals(other.gender))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.dateOfBirth == <span class="keyword">null</span></span><br><span class="line">                ? other.dateOfBirth != <span class="keyword">null</span></span><br><span class="line">                : !<span class="keyword">this</span>.dateOfBirth.equals(other.dateOfBirth))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.ssn == <span class="keyword">null</span></span><br><span class="line">                ? other.ssn != <span class="keyword">null</span></span><br><span class="line">                : !<span class="keyword">this</span>.ssn.equals(other.ssn))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@java</span>.lang.Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> PRIME = <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">        result = result * PRIME +</span><br><span class="line">            (<span class="keyword">this</span>.firstName == <span class="keyword">null</span> ? <span class="number">0</span> : <span class="keyword">this</span>.firstName.hashCode());</span><br><span class="line">        result = result * PRIME +</span><br><span class="line">            (<span class="keyword">this</span>.lastName == <span class="keyword">null</span> ? <span class="number">0</span> : <span class="keyword">this</span>.lastName.hashCode());</span><br><span class="line">        result = result * PRIME +</span><br><span class="line">            (<span class="keyword">this</span>.gender == <span class="keyword">null</span> ? <span class="number">0</span> : <span class="keyword">this</span>.gender.hashCode());</span><br><span class="line">        result = result * PRIME +</span><br><span class="line">            (<span class="keyword">this</span>.dateOfBirth == <span class="keyword">null</span> ? <span class="number">0</span> : <span class="keyword">this</span>.dateOfBirth.hashCode());</span><br><span class="line">        result = result * PRIME +</span><br><span class="line">            (<span class="keyword">this</span>.ssn == <span class="keyword">null</span> ? <span class="number">0</span> : <span class="keyword">this</span>.ssn.hashCode());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="4-2-限制"><a href="#4-2-限制" class="headerlink" title="4.2 限制"></a>4.2 限制</h3><p>虽然Project Lombok做了一些戏剧性的事情来让开发人员的生活更轻松，但它有其局限性。 浏览问题列表将很快阐明目前的一些缺点，其中大部分都是次要的。 一个重要的问题是无法检测超类的构造函数。 这意味着如果超类没有默认构造函数，则任何子类都不能使用<code>@Data</code>注释而不显式编写构造函数来使用可用的超类构造函数。 由于Project Lombok尊重与要生成的方法名称匹配的任何方法，因此使用此方法可以克服其大多数功能缺陷。</p><h2 id="五、添加Lombok到项目"><a href="#五、添加Lombok到项目" class="headerlink" title="五、添加Lombok到项目"></a>五、添加Lombok到项目</h2><p><strong>Maven</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.16.16&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p><strong>Ivy</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency org=&quot;org.projectlombok&quot; name=&quot;lombok&quot; rev=&quot;1.16.16&quot; conf=&quot;build&quot; /&gt;</span><br></pre></td></tr></table></figure><p><strong>SBT</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libraryDependencies += &quot;org.projectlombok&quot; % &quot;lombok&quot; % &quot;1.16.16&quot;</span><br></pre></td></tr></table></figure><p><strong>Gradle</strong><br>If your gradle version is &gt;= 2.12<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compileOnly <span class="string">"org.projectlombok:lombok:1.16.16"</span></span><br></pre></td></tr></table></figure></p><p>If you use an older version you can still use the following:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">provided <span class="string">"org.projectlombok:lombok:1.16.16"</span></span><br></pre></td></tr></table></figure><p><strong>NOTE</strong>:<br><strong><em>You’ll still need to download lombok, or doubleclick on the lombok.jar file downloaded by maven / ivy / gradle, to install lombok into your eclipse installation.</em></strong><br><a href="https://projectlombok.org/downloads/lombok.jar" target="_blank" rel="noopener">下载 lombok.jar </a></p><h2 id="六、API"><a href="#六、API" class="headerlink" title="六、API"></a>六、API</h2><h3 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a>Packages</h3><h4 id="6-1-lombok"><a href="#6-1-lombok" class="headerlink" title="6.1 lombok"></a>6.1 lombok</h4><p>该软件包包含作为lombok用户所需的所有注释和支持类</p><ul><li>类<ul><li>ConfigurationKeys</li><li>Lombok</li></ul></li><li>枚举<ul><li>AccessLevel</li></ul></li><li>注解<ul><li><code>@AllArgsConstructor</code><br>生成一个all-args构造函数。</li></ul></li></ul><pre><code>* `@Builder` 构建器注释为带注释的类或包含带注释的成员的类创建所谓的“构建器”方面@Builder。* `@Builder.Default` 注释的字段@Default必须具有初始化表达式; 如果在构建期间未明确设置，则将该表达式作为默认使用。* `@Builder.ObtainVia` 放置一个字段（在@Builder类型的情况下）或参数（用于@Builder构造函数或静态方法）以指示lombok如何在给定实例的情况下获取该字段或参数的值; 这只是相关toBuilder的true。* `@Cleanup` 通过调用close方法确保您注释的变量声明将被清除，无论发生什么。* `@Data`生成所有字段的getter，有用的toString方法，以及检查所有非瞬态字段的hashCode和equals实现。* `@EqualsAndHashCode` 根据相关字段为所有对象继承的方法equals和hashCode方法生成实现。* `@Generated` Lombok最终会自动将此注释添加到所有生成的构造函数，方法，字段和类型中。* `@Getter` lombok构建一个标准的getter。* `@NoArgsConstructor` 生成一个无参数构造函数。* `@NonNull`如果放在参数上，lombok将在方法/构造函数体的开头插入一个空检查，NullPointerException并将参数的名称作为消息抛出 。* `@RequiredArgsConstructor`生成带有必需参数的构造函数。* `@Setter`使lombok构建一个标准的setter。* `@Singular`单数注释与@Builder用于在集合的构建器中创建单个元素“添加”方法一起使用。* `@SneakyThrows`@SneakyThrow将避免javac坚持要么捕获或抛出方法体中声明它们生成的语句的任何已检查异常。* `@Synchronized`几乎就像将&apos;synchronized&apos;关键字放在方法上一样，除非在私有内部对象上进行同步，因此不受您控制的其他代码不会通过锁定您自己的实例来干扰您的线程管理。* `@ToString`为toString所有对象继承的方法生成实现，包括打印相关字段的值。* `@val`使用val任何局部变量声明的类型（甚至在换每个语句），和类型将从初始化表达来推断。* `@Value`生成许多​​适合于表示不可变实体的类的代码。</code></pre><hr><h4 id="6-2-lombok-experimental"><a href="#6-2-lombok-experimental" class="headerlink" title="6.2 lombok.experimental"></a>6.2 lombok.experimental</h4><p>此软件包包含作为lombok用户所需的注释和支持类，适用于尚未作为第一类功能支持的所有功能。</p><ul><li>Accessors     用于生成getter和setter的设置的容器。</li><li>Delegate</li><li>ExtensionMethod</li><li>FieldDefaults</li><li>Helper</li><li>NonFinal</li><li>PackagePrivate</li><li>Tolerate</li><li>UtilityClass</li><li>var</li><li>Wither</li></ul><hr><h4 id="6-3-lombok-extern-apachecommons"><a href="#6-3-lombok-extern-apachecommons" class="headerlink" title="6.3 lombok.extern.apachecommons"></a>6.3 lombok.extern.apachecommons</h4><ul><li><p>CommonsLog 导致lombok生成记录器字段。<br>  <code>Package lombok.extern.apachecommons</code><br>  注解类型 <code>@CommonsLog</code></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(SOURCE)</span><br><span class="line"><span class="meta">@Target</span>(TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CommonsLog</span><br></pre></td></tr></table></figure><p>  示例：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CommonsLog</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogExample</span> </span>&#123;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>  将生成：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogExample</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(LogExample.class);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>  <strong>此注解对类和枚举有效。</strong></p></li></ul><hr><h4 id="6-4-lombok-extern-java"><a href="#6-4-lombok-extern-java" class="headerlink" title="6.4 lombok.extern.java"></a>6.4 lombok.extern.java</h4><ul><li><p>Log 导致lombok生成记录器字段。<br>  <code>Package lombok.extern.java</code><br>  注解类型 <code>@Log</code></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(SOURCE)</span><br><span class="line"><span class="meta">@Target</span>(TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Log</span><br></pre></td></tr></table></figure><p>  示例：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Log</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogExample</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  将生成：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogExample</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> java.util.logging.Logger log = java.util.logging.Logger.getLogger(LogExample.class.getName());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><pre><code>**此注解对类和枚举有效。**</code></pre><hr><h4 id="6-5-lombok-extern-jbosslog"><a href="#6-5-lombok-extern-jbosslog" class="headerlink" title="6.5 lombok.extern.jbosslog"></a>6.5 lombok.extern.jbosslog</h4><ul><li><p>JBossLog 导致lombok生成记录器字段。<br>  <code>Package lombok.extern.jbosslog</code><br>  注解类型 <code>@JBossLog</code></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(SOURCE)</span><br><span class="line"><span class="meta">@Target</span>(TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> JBossLog</span><br></pre></td></tr></table></figure><p>  示例：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JBossLog</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogExample</span> </span>&#123;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>  将生成：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogExample</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.jboss.logging.Logger log = org.jboss.logging.Logger.getLogger(LogExample.class);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>  <strong>此注解对类和枚举有效。</strong></p></li></ul><hr><h4 id="6-6-lombok-extern-log4j"><a href="#6-6-lombok-extern-log4j" class="headerlink" title="6.6 lombok.extern.log4j"></a>6.6 lombok.extern.log4j</h4><ul><li><p>Log4j 导致lombok生成记录器字段。</p><ul><li><p><code>Package lombok.extern.log4j</code><br>  注解类型 <code>@Log4j</code></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(SOURCE)</span><br><span class="line"><span class="meta">@Target</span>(TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Log4j</span><br></pre></td></tr></table></figure><p>  示例：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Log</span>4j</span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogExample</span> </span>&#123;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>  将生成：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogExample</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(LogExample.class);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>  <strong>此注解对类和枚举有效。</strong></p></li></ul></li><li><p>Log4j2 导致lombok生成记录器字段。</p><ul><li><p><code>Package lombok.extern.log4j</code><br>  注解类型 <code>@Log4j2</code></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(SOURCE)</span><br><span class="line"><span class="meta">@Target</span>(TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Log4j2</span><br></pre></td></tr></table></figure><p>  示例：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Log</span>4j2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogExample</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  将生成：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogExample</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(LogExample.class);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>  <strong>此注解对类和枚举有效。</strong></p></li></ul></li></ul><hr><h4 id="6-7-lombok-extern-slf4j"><a href="#6-7-lombok-extern-slf4j" class="headerlink" title="6.7 lombok.extern.slf4j"></a>6.7 lombok.extern.slf4j</h4><ul><li><p>Slf4j  导致lombok生成记录器字段。</p><ul><li><p><code>Package lombok.extern.slf4j</code></p><pre><code>注解类型 `@Slf4j`</code></pre>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(SOURCE)</span><br><span class="line"><span class="meta">@Target</span>(TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Slf4j</span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogExample</span> </span>&#123;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>将生成：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(LogExample.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>**此注解对类和枚举有效。**</code></pre><ul><li><p>XSlf4j  导致lombok生成记录器字段。</p><ul><li><p><code>Package lombok.extern.slf4j</code></p><pre><code>注解类型 `@XSlf4j`</code></pre>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(SOURCE)</span><br><span class="line"><span class="meta">@Target</span>(TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> XSlf4j</span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@XSlf</span>4j</span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogExample</span> </span>&#123;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>将生成：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.slf4j.ext.XLogger log = org.slf4j.ext.XLoggerFactory.getXLogger(LogExample.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>**此注解对类和枚举有效。**</code></pre><hr><p>##七、常用注解</p><ul><li><code>val</code></li><li><code>var</code></li><li><code>@NonNull</code></li><li><code>@Cleanup</code></li><li><code>@Getter/@Setter</code></li><li><code>@ToString</code></li><li><code>@EqualsAndHashCode</code></li><li><code>@NoArgsConstructor, @RequiredArgsConstructor and @AllArgsConstructor</code></li><li><code>@Data</code></li><li><code>@Value</code></li><li><code>@Builder</code></li><li><code>@SneakyThrows</code></li><li><code>@Synchronized</code></li><li><code>@Getter(lazy=true)</code></li><li><code>@Log</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;p&gt;Project Lombok是一个java库，它可以自动插入你的编辑器并构建工具，为你的java加油。&lt;br&gt;永远不要再写另
      
    
    </summary>
    
      <category term="效率工具" scheme="https://kaiser-wu.github.io/categories/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="lombok" scheme="https://kaiser-wu.github.io/tags/lombok/"/>
    
  </entry>
  
</feed>
